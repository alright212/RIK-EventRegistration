@using System.Linq
@using EventRegistration.Application
@model EventRegistration.Application.EventDetailViewModel
@{
    ViewData["Title"] = "Osav√µtjad";
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<div class="px-4 py-3">
    <div class="flex mb-8 h-20">
        <div class="flex w-full">
            <div class="w-1/3 main-blue-bg text-white flex items-center p-3 sm:p-4">
                <h1 class="text-xl sm:text-2xl font-bold m-0">Osav√µtjad</h1>
            </div>
            <div class="w-2/3">
                <img src="~/images/libled.png" alt="Osav√µtjate p√§is" class="w-full h-full object-cover" onerror="this.onerror=null;this.src='https://placehold.co/600x300/a0aec0/ffffff?text=Image';" />
            </div>
        </div>
    </div>

    <div class="bg-white p-4 sm:p-6">
        @if (TempData["Error"] != null)
        {
            <div class="mb-4 p-4 bg-red-100 border border-red-300 text-red-700 rounded-md">
                @TempData["Error"]
            </div>
        }
        
        <div class="mb-4">
            <div class="mb-4">
                <a asp-controller="Home" asp-action="Index" class="text-blue-600 hover:underline text-sm">
                    ‚Üê Tagasi avalehele
                </a>
            </div>
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <h2 class="text-lg font-bold">@Model.Event.Name</h2>
                    <div class="text-sm text-gray-600">
                        <p><strong>Toimumisaeg:</strong> @Model.Event.EventTime.ToString("dd.MM.yyyy")</p>
                        <p><strong>Koht:</strong> @Model.Event.Location</p>
                    </div>
                </div>
                @{
                    var isPastEvent = Model.Event.EventTime <= DateTime.Now;
                }
                @if (!isPastEvent)
                {
                    <div class="ml-4 flex gap-2">
                        <a asp-controller="Events" asp-action="Edit" asp-route-id="@Model.Event.Id" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-sm">
                            Muuda √ºritust
                        </a>
                        <form asp-controller="Events" asp-action="Delete" asp-route-id="@Model.Event.Id" method="post" style="display: inline;" onsubmit="return confirm('Kas oled kindel, et soovid selle √ºrituse kustutada? Seda toimingut ei saa tagasi v√µtta.');">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 text-sm">
                                Kustuta √ºritus
                            </button>
                        </form>
                    </div>
                }
            </div>
            
            @if (!string.IsNullOrWhiteSpace(Model.Event.AdditionalInfo))
            {
                <div class="mt-4 p-3 bg-gray-50 rounded-md border">
                    <h4 class="text-sm font-semibold text-gray-700 mb-2">Lisainfo:</h4>
                    <div class="text-sm text-gray-600">
                        @Html.Raw(Html.Encode(Model.Event.AdditionalInfo).Replace("\n", "<br />"))
                    </div>
                </div>
            }
        </div>

        <h3 class="font-bold text-md mb-2">Osav√µtjad:</h3>
        
        @if (Model.Participants != null && Model.Participants.Any())
        {
            <div class="space-y-2">
                @foreach (var (participant, index) in Model.Participants.Select((p, i) => (p, i + 1)))
                {
                    <div class="grid grid-cols-12 gap-x-4 items-center border-b py-2">
                        <div class="col-span-1 text-right">@index.</div>
                        <div class="col-span-5 font-semibold">
                            @participant.FullName
                        </div>
                        <div class="col-span-3 text-gray-500">
                            @if (participant.ParticipantType == "Individual")
                            {
                                @participant.PersonalIdCode
                            }
                            else
                            {
                                @participant.RegistryCode
                            }
                        </div>
                        <div class="col-span-3 flex justify-end space-x-2">
                            <a asp-controller="Participants" asp-action="Details" asp-route-eventId="@Model.Event.Id" asp-route-participantId="@participant.ParticipantId" class="text-blue-600 hover:underline text-sm flex items-center gap-1">
                                VAATA üëÅ
                            </a>
                            @if (!isPastEvent)
                            {
                                <a asp-controller="Participants" asp-action="Edit" asp-route-eventId="@Model.Event.Id" asp-route-participantId="@participant.ParticipantId" class="text-green-600 hover:underline text-sm flex items-center gap-1">
                                    MUUDA ‚úè
                                </a>
                                <form asp-controller="Participants" asp-action="Delete" asp-route-eventId="@Model.Event.Id" asp-route-participantId="@participant.ParticipantId" method="post" onsubmit="return confirm('Kas olete kindel, et soovite selle osav√µtja kustutada?');" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="text-red-600 hover:underline text-sm flex items-center gap-1">
                                        KUSTUTA
                                        <img src="@Url.Content("~/images/remove.png")" alt="Kustuta" class="w-3 h-3">
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-center text-gray-500 py-4">Osav√µtjaid ei ole veel lisatud.</p>
        }

        <hr class="my-6"/>

        @if (!isPastEvent)
        {
            <div>
                <h3 class="text-lg font-bold mb-4">Osav√µtjate lisamine</h3>
                
                <!-- Add Participant Form -->
                <form asp-controller="Participants" asp-action="Add" method="post" class="bg-gray-50 p-6 rounded-lg" id="participant-form">
                @Html.AntiForgeryToken()
                <input type="hidden" name="EventId" value="@ViewBag.EventId" />
                
                <!-- Display validation summary -->
                @if (TempData["ValidationErrors"] is List<string> validationErrors && validationErrors.Any())
                {
                    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                @{
                                    // Use a case-insensitive search to find the specific duplicate participant error.
                                    var duplicateIdError = validationErrors.FirstOrDefault(e => e.IndexOf("sama isikukoodiga", StringComparison.OrdinalIgnoreCase) >= 0);

                                    // If the *only* error is the duplicate participant error, display it directly.
                                    if (duplicateIdError != null && validationErrors.Count == 1)
                                    {
                                        <p class="text-sm text-red-700">@duplicateIdError</p>
                                    }
                                    else
                                    {
                                        // Otherwise, display the standard header and the list of all errors.
                                        <h3 class="text-sm font-medium text-red-800">Palun parandage j√§rgmised vead:</h3>
                                        <div class="mt-2 text-sm text-red-700">
                                            <ul class="list-disc list-inside space-y-1">
                                                @foreach (var message in validationErrors)
                                                {
                                                    <li>@message</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
                
                <!-- Participant Type Selection -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-3">Osav√µtja t√º√ºp:</label>
                    <div class="flex space-x-4">
                        <label class="inline-flex items-center">
                            <input type="radio" name="ParticipantType" value="Individual" class="form-radio text-blue-600" 
                                   @(TempData["ParticipantType"]?.ToString() != "Company" ? "checked" : "") />
                            <span class="ml-2">Eraisik</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="ParticipantType" value="Company" class="form-radio text-blue-600" 
                                   @(TempData["ParticipantType"]?.ToString() == "Company" ? "checked" : "") />
                            <span class="ml-2">Ettev√µte</span>
                        </label>
                    </div>
                </div>

                <!-- Individual Participant Fields -->
                <div id="individual-fields" class="participant-fields" style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "display: none;" : "")">
                    <div class="grid md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Eesnimi: <span class="text-red-500">*</span></label>
                            <input name="Individual.FirstName" value="@TempData["Individual.FirstName"]" 
                                   class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                   maxlength="100" 
                                   data-val="true" 
                                   data-val-required="The FirstName field is required." 
                                   data-val-length="The field FirstName must be a string with a maximum length of 100."
                                   data-val-length-max="100" />
                            <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Individual.FirstName" data-valmsg-replace="true"></span>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Perekonnanimi: <span class="text-red-500">*</span></label>
                            <input name="Individual.LastName" value="@TempData["Individual.LastName"]" 
                                   class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                   maxlength="100" 
                                   data-val="true" 
                                   data-val-required="The LastName field is required." 
                                   data-val-length="The field LastName must be a string with a maximum length of 100."
                                   data-val-length-max="100" />
                            <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Individual.LastName" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Isikukood: <span class="text-red-500">*</span></label>
                        <input name="Individual.PersonalIdCode" value="@TempData["Individual.PersonalIdCode"]" 
                               class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                               placeholder="38512345678"
                               data-val="true" 
                               data-val-required="The PersonalIdCode field is required." 
                               data-val-regex="Invalid Estonian Personal ID Code."
                               data-val-regex-pattern="^[3-6]\d{10}$" />
                        <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Individual.PersonalIdCode" data-valmsg-replace="true"></span>
                        <p class="mt-1 text-sm text-gray-500">Sisestage 11-kohaline Eesti isikukood</p>
                    </div>
                </div>

                <!-- Company Participant Fields -->
                <div id="company-fields" class="participant-fields" style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "" : "display: none;")">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Juriidiline nimi: <span class="text-red-500">*</span></label>
                        <input name="Company.LegalName" value="@TempData["Company.LegalName"]" 
                               class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                               maxlength="200" 
                               data-val="true" 
                               data-val-required="The LegalName field is required." 
                               data-val-length="The field LegalName must be a string with a maximum length of 200."
                               data-val-length-max="200" />
                        <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Company.LegalName" data-valmsg-replace="true"></span>
                    </div>
                    <div class="grid md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Registrikood: <span class="text-red-500">*</span></label>
                            <input name="Company.RegistryCode" value="@TempData["Company.RegistryCode"]" 
                                   class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                   placeholder="12345678" 
                                   data-val="true" 
                                   data-val-required="The RegistryCode field is required." 
                                   data-val-regex="Invalid Estonian Registry Code."
                                   data-val-regex-pattern="^\d{8}$" />
                            <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Company.RegistryCode" data-valmsg-replace="true"></span>
                            <p class="mt-1 text-sm text-gray-500">8-kohaline numbriline kood</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Osav√µtjate arv: <span class="text-red-500">*</span></label>
                            <input name="Company.NumberOfParticipants" value="@TempData["Company.NumberOfParticipants"]" 
                                   type="number" min="1" max="999999" 
                                   class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                   data-val="true" 
                                   data-val-required="The NumberOfParticipants field is required." 
                                   data-val-range="Number of participants must be at least 1."
                                   data-val-range-min="1" 
                                   data-val-range-max="2147483647" />
                            <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Company.NumberOfParticipants" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>

                <!-- Payment Method (Common for both) -->
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Makseviis: <span class="text-red-500">*</span></label>
                    <select id="payment-method-individual" name="Individual.PaymentMethodId" 
                            class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                            style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "display: none;" : "")"
                            data-val="true" 
                            data-val-required="The PaymentMethodId field is required.">
                        <option value="">Vali makseviis</option>
                        @foreach (var paymentMethod in ViewBag.PaymentMethods)
                        {
                            if (TempData["Individual.PaymentMethodId"]?.ToString() == paymentMethod.Value)
                            {
                                <option value="@paymentMethod.Value" selected="selected">@paymentMethod.Text</option>
                            }
                            else
                            {
                                <option value="@paymentMethod.Value">@paymentMethod.Text</option>
                            }
                        }
                    </select>
                    <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Individual.PaymentMethodId" data-valmsg-replace="true"></span>
                    
                    <select id="payment-method-company" name="Company.PaymentMethodId" 
                            class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                            style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "" : "display: none;")"
                            data-val="true" 
                            data-val-required="The PaymentMethodId field is required.">
                        <option value="">Vali makseviis</option>
                        @foreach (var paymentMethod in ViewBag.PaymentMethods)
                        {
                            if (TempData["Company.PaymentMethodId"]?.ToString() == paymentMethod.Value)
                            {
                                <option value="@paymentMethod.Value" selected="selected">@paymentMethod.Text</option>
                            }
                            else
                            {
                                <option value="@paymentMethod.Value">@paymentMethod.Text</option>
                            }
                        }
                    </select>
                    <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Company.PaymentMethodId" data-valmsg-replace="true"></span>
                </div>

                <!-- Additional Info (Common for both) -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Lisainfo:</label>
                    <textarea id="additional-info-individual" name="Individual.AdditionalInfo" rows="3" maxlength="1500" 
                              class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                              placeholder="M√§rkused v√µi erin√µuded..." 
                              style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "display: none;" : "")"
                              data-val="true" 
                              data-val-length="The field AdditionalInfo must be a string with a maximum length of 1500."
                              data-val-length-max="1500">@TempData["Individual.AdditionalInfo"]</textarea>
                    <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Individual.AdditionalInfo" data-valmsg-replace="true"></span>
                    
                    <textarea id="additional-info-company" name="Company.AdditionalInfo" rows="3" maxlength="5000" 
                              class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                              placeholder="M√§rkused v√µi erin√µuded..." 
                              style="@(TempData["ParticipantType"]?.ToString() == "Company" ? "" : "display: none;")"
                              data-val="true" 
                              data-val-length="The field AdditionalInfo must be a string with a maximum length of 5000."
                              data-val-length-max="5000">@TempData["Company.AdditionalInfo"]</textarea>
                    <span class="field-validation-valid text-red-600 text-sm" data-valmsg-for="Company.AdditionalInfo" data-valmsg-replace="true"></span>
                </div>

                <!-- Submit Button -->
                <div class="flex justify-end">
                    <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Lisa osav√µtja
                    </button>
                </div>
                </form>
            </div>
        }
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const individualRadio = document.querySelector('input[value="Individual"]');
    const companyRadio = document.querySelector('input[value="Company"]');
    const individualFields = document.getElementById('individual-fields');
    const companyFields = document.getElementById('company-fields');
    const paymentMethodIndividual = document.getElementById('payment-method-individual');
    const paymentMethodCompany = document.getElementById('payment-method-company');
    const additionalInfoIndividual = document.getElementById('additional-info-individual');
    const additionalInfoCompany = document.getElementById('additional-info-company');
    const form = document.getElementById('participant-form');

    function toggleFields() {
        if (individualRadio && individualRadio.checked) {
            if (individualFields) individualFields.style.display = 'block';
            if (companyFields) companyFields.style.display = 'none';
            if (paymentMethodIndividual) paymentMethodIndividual.style.display = 'block';
            if (paymentMethodCompany) paymentMethodCompany.style.display = 'none';
            if (additionalInfoIndividual) additionalInfoIndividual.style.display = 'block';
            if (additionalInfoCompany) additionalInfoCompany.style.display = 'none';
            
            // Enable/disable validation data attributes for visible fields
            setValidationEnabled(individualFields, true);
            setValidationEnabled(companyFields, false);
            if (paymentMethodIndividual) setValidationEnabled(paymentMethodIndividual, true);
            if (paymentMethodCompany) setValidationEnabled(paymentMethodCompany, false);
        } else {
            if (individualFields) individualFields.style.display = 'none';
            if (companyFields) companyFields.style.display = 'block';
            if (paymentMethodIndividual) paymentMethodIndividual.style.display = 'none';
            if (paymentMethodCompany) paymentMethodCompany.style.display = 'block';
            if (additionalInfoIndividual) additionalInfoIndividual.style.display = 'none';
            if (additionalInfoCompany) additionalInfoCompany.style.display = 'block';
            
            // Enable/disable validation data attributes for visible fields
            setValidationEnabled(individualFields, false);
            setValidationEnabled(companyFields, true);
            if (paymentMethodIndividual) setValidationEnabled(paymentMethodIndividual, false);
            if (paymentMethodCompany) setValidationEnabled(paymentMethodCompany, true);
        }
        
        // Clear validation messages when switching
        const validationSpans = form.querySelectorAll('.field-validation-error');
        validationSpans.forEach(span => {
            span.textContent = '';
            span.className = 'field-validation-valid text-red-600 text-sm';
        });
        
        // Re-parse validation for the form after toggling fields
        if ($.validator && $.validator.unobtrusive) {
            $.validator.unobtrusive.parse(form);
        }
    }
    
    function setValidationEnabled(container, enabled) {
        if (!container) return;
        
        const inputs = container.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (enabled) {
                // Restore validation attributes if they were stored
                const storedValidation = input.getAttribute('data-stored-val');
                if (storedValidation) {
                    input.setAttribute('data-val', storedValidation);
                    input.removeAttribute('data-stored-val');
                }
                
                // Restore other validation attributes
                const attrs = input.attributes;
                for (let i = 0; i < attrs.length; i++) {
                    const attr = attrs[i];
                    if (attr.name.startsWith('data-stored-val-')) {
                        const newAttrName = attr.name.replace('data-stored-val-', 'data-val-');
                        input.setAttribute(newAttrName, attr.value);
                        input.removeAttribute(attr.name);
                    }
                }
            } else {
                // Store and remove validation attributes
                const dataVal = input.getAttribute('data-val');
                if (dataVal) {
                    input.setAttribute('data-stored-val', dataVal);
                    input.removeAttribute('data-val');
                }
                
                // Store and remove other validation attributes
                const attrs = Array.from(input.attributes);
                attrs.forEach(attr => {
                    if (attr.name.startsWith('data-val-')) {
                        const storedAttrName = attr.name.replace('data-val-', 'data-stored-val-');
                        input.setAttribute(storedAttrName, attr.value);
                        input.removeAttribute(attr.name);
                    }
                });
            }
        });
    }

    // Personal ID Code autofill functionality
    const personalIdCodeInput = document.querySelector('input[name="Individual.PersonalIdCode"]');
    const firstNameInput = document.querySelector('input[name="Individual.FirstName"]');
    const lastNameInput = document.querySelector('input[name="Individual.LastName"]');
    
    if (personalIdCodeInput && firstNameInput && lastNameInput) {
        let debounceTimer;
        let lastAutofilledIdCode = '';
        let isAutofilledData = false;
        
        function clearAutofilledData() {
            if (isAutofilledData) {
                firstNameInput.value = '';
                lastNameInput.value = '';
                isAutofilledData = false;
                lastAutofilledIdCode = '';
            }
        }
        
        function areNameFieldsManuallyModified() {
            if (!isAutofilledData) {
                return firstNameInput.value.trim() !== '' || lastNameInput.value.trim() !== '';
            }
            return false;
        }
        
        personalIdCodeInput.addEventListener('input', function() {
            const personalIdCode = this.value.trim();
            
            clearTimeout(debounceTimer);
            
            if (personalIdCode === '' || personalIdCode.length < 11) {
                clearAutofilledData();
                return;
            }
            
            if (personalIdCode.length === 11 && /^[3-6]\d{10}$/.test(personalIdCode)) {
                if (personalIdCode === lastAutofilledIdCode && isAutofilledData) {
                    return;
                }
                
                debounceTimer = setTimeout(async function() {
                    try {
                        const response = await fetch(`/Participants/LookupByPersonalIdCode?personalIdCode=${encodeURIComponent(personalIdCode)}`);
                        
                        if (response.ok) {
                            const participantData = await response.json();
                            const hasManualNames = areNameFieldsManuallyModified();
                            
                            if (!hasManualNames || isAutofilledData) {
                                firstNameInput.value = participantData.firstName;
                                lastNameInput.value = participantData.lastName;
                                isAutofilledData = true;
                                lastAutofilledIdCode = personalIdCode;
                            }
                        } else if (response.status === 404) {
                            if (isAutofilledData && personalIdCode !== lastAutofilledIdCode) {
                                clearAutofilledData();
                            }
                        }
                    } catch (error) {
                        console.error('Error looking up participant:', error);
                    }
                }, 300);
            } else {
                clearAutofilledData();
            }
        });
        
        firstNameInput.addEventListener('input', function() {
            if (isAutofilledData && this.value !== '') {
                isAutofilledData = false;
                lastAutofilledIdCode = '';
            }
        });
        
        lastNameInput.addEventListener('input', function() {
            if (isAutofilledData && this.value !== '') {
                isAutofilledData = false;
                lastAutofilledIdCode = '';
            }
        });
        
        personalIdCodeInput.addEventListener('change', function() {
            this.dispatchEvent(new Event('input'));
        });
    }

    // Company Registry Code autofill functionality
    const registryCodeInput = document.querySelector('input[name="Company.RegistryCode"]');
    const legalNameInput = document.querySelector('input[name="Company.LegalName"]');
    
    if (registryCodeInput && legalNameInput) {
        let companyDebounceTimer;
        let lastAutofilledRegistryCode = '';
        let isCompanyAutofilledData = false;
        
        function clearCompanyAutofilledData() {
            if (isCompanyAutofilledData) {
                legalNameInput.value = '';
                isCompanyAutofilledData = false;
                lastAutofilledRegistryCode = '';
            }
        }
        
        function areCompanyFieldsManuallyModified() {
            if (!isCompanyAutofilledData) {
                return legalNameInput.value.trim() !== '';
            }
            return false;
        }
        
        registryCodeInput.addEventListener('input', function() {
            const registryCode = this.value.trim();
            
            clearTimeout(companyDebounceTimer);
            
            if (registryCode === '' || registryCode.length < 8) {
                clearCompanyAutofilledData();
                return;
            }
            
            if (registryCode.length === 8 && /^\d{8}$/.test(registryCode)) {
                if (registryCode === lastAutofilledRegistryCode && isCompanyAutofilledData) {
                    return;
                }
                
                companyDebounceTimer = setTimeout(async function() {
                    try {
                        const response = await fetch(`/Participants/LookupByRegistryCode?registryCode=${encodeURIComponent(registryCode)}`);
                        
                        if (response.ok) {
                            const companyData = await response.json();
                            const hasManualCompanyData = areCompanyFieldsManuallyModified();
                            
                            if (!hasManualCompanyData || isCompanyAutofilledData) {
                                legalNameInput.value = companyData.legalName;
                                isCompanyAutofilledData = true;
                                lastAutofilledRegistryCode = registryCode;
                            }
                        } else if (response.status === 404) {
                            if (isCompanyAutofilledData && registryCode !== lastAutofilledRegistryCode) {
                                clearCompanyAutofilledData();
                            }
                        }
                    } catch (error) {
                        console.error('Error looking up company:', error);
                    }
                }, 300);
            } else {
                clearCompanyAutofilledData();
            }
        });
        
        legalNameInput.addEventListener('input', function() {
            if (isCompanyAutofilledData && this.value !== '') {
                isCompanyAutofilledData = false;
                lastAutofilledRegistryCode = '';
            }
        });
        
        registryCodeInput.addEventListener('change', function() {
            this.dispatchEvent(new Event('input'));
        });
    }

    // Add event listeners for radio buttons
    if (individualRadio) {
        individualRadio.addEventListener('change', toggleFields);
    }
    if (companyRadio) {
        companyRadio.addEventListener('change', toggleFields);
    }
    
    // Initial setup
    toggleFields();
});
</script>
